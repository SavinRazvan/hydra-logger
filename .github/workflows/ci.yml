name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.11, 3.12, 3.13]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=hydra_logger --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Run flake8
      run: |
        flake8 hydra_logger/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 hydra_logger/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run black
      run: |
        black --check --diff hydra_logger/ tests/
    
    - name: Run isort
      run: |
        isort --check-only --diff hydra_logger/ tests/
    
    - name: Run mypy
      run: |
        mypy hydra_logger/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]" build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Run bandit security scan
      run: |
        bandit -r hydra_logger/ -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  update-badges:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
    
    - name: Get test count and coverage
      id: stats
      run: |
        # Get test count
        TEST_COUNT=$(python -m pytest --collect-only -q | tail -1 | grep -o '[0-9]*' | head -1)
        echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
        
        # Get coverage percentage
        COVERAGE_PCT=$(python -m pytest --cov=hydra_logger --cov-report=term-missing -q | grep 'TOTAL' | grep -o '[0-9]*%' | head -1 | sed 's/%//')
        echo "coverage_pct=$COVERAGE_PCT" >> $GITHUB_OUTPUT
        
        echo "üìä Stats: $TEST_COUNT tests, ${COVERAGE_PCT}% coverage"
    
    - name: Update README badges
      run: |
        python scripts/update_badges.py \
          --test-count ${{ steps.stats.outputs.test_count }} \
          --coverage-percentage ${{ steps.stats.outputs.coverage_pct }}
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è  No changes to commit - badges are already up to date"
          exit 0
        fi
        
        git commit -m "ü§ñ Auto-update badges: ${{ steps.stats.outputs.test_count }} tests, ${{ steps.stats.outputs.coverage_pct }}% coverage"
        
        # Try to push, but don't fail the job if permission denied
        git push || {
          echo "‚ö†Ô∏è  Could not push changes - this is expected if badges are already up to date"
          echo "‚ÑπÔ∏è  The job completed successfully, badges are current"
          exit 0
        }
